/* Code from https://github.com/wcandillon/swagger-js-codegen, modified by Tim McCabe

Original license:

Copyright 2014

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*jshint esversion: 6 */
/*global fetch, btoa */
/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
 * @param {string} [domainOrOptions.domain] - The project domain
 * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
 */
let {{&className}} = (function(){
    'use strict';

    function {{&className}}(options){
        let domain = (typeof options === 'object') ? options.domain : options;
        this.domain = domain ? domain : '{{&domain}}';
        if(this.domain.length === 0) {
            throw new Error('Domain parameter must be specified as a string.');
        }
        {{#isSecure}}
            {{#isSecureToken}}
                this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
            {{/isSecureToken}}
            {{#isSecureApiKey}}
                this.apiKey = (typeof options === 'object') ? (options.apiKey ? options.apiKey : {}) : {};
            {{/isSecureApiKey}}
            {{#isSecureBasic}}
                this.basic = (typeof options === 'object') ? (options.basic ? options.basic : {}) : {};
            {{/isSecureBasic}}
        {{/isSecure}}
    }

    function serializeQueryParams(parameters) {
        let str = [];
        for (let p in parameters) {
            if (parameters.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(parameters[p]));
            }
        }
        return str.join('&');
     }

     function mergeQueryParams(parameters, queryParameters) {
        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                  .forEach(function(parameterName) {
                      {{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} parameter = parameters.$queryParameters[parameterName];
                      queryParameters[parameterName] = parameter;
            });
        }
        return queryParameters;
     }

     /**
      * HTTP Request
      * @method
      * @name {{&className}}#request
      * @param {string} method - http method
      * @param {string} url - url to do request
      * @param {object} parameters
      * @param {object} body - body parameters / object
      * @param {object} headers - header parameters
      * @param {object} queryParameters - querystring parameters
      * @param {object} form - form data object
      */
    {{&className}}.prototype.request = function(method, url, parameters, body, headers, queryParameters, form){
        const queryParams = queryParameters && Object.keys(queryParameters).length ? serializeQueryParams(queryParameters) : null ;
        const urlWithParams = url + (queryParams ? '?' + queryParams : '');

        if(body && !Object.keys(body).length) {
            body = undefined;
        }

        return fetch(urlWithParams, {
            method,
            headers,
            body: JSON.stringify(body)
        }).then(response => {
            return response.json();
        });
    };

    {{#isSecure}}
        {{#isSecureToken}}
            /**
            * Set Token
            * @method
            * @name {{&className}}#setToken
            * @param {string} value - token's value
            * @param {string} headerOrQueryName - the header or query name to send the token at
            * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
            */
            {{&className}}.prototype.setToken = function (value, headerOrQueryName, isQuery) {
                this.token.value = value;
                this.token.headerOrQueryName = headerOrQueryName;
                this.token.isQuery = isQuery;
            };
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            /**
            * Set Api Key
            * @method
            * @name {{&className}}#setApiKey
            * @param {string} value - apiKey's value
            * @param {string} headerOrQueryName - the header or query name to send the apiKey at
            * @param {boolean} isQuery - true if send the apiKey as query param, otherwise, send as header param
            */
            {{&className}}.prototype.setApiKey = function (value, headerOrQueryName, isQuery) {
                this.apiKey.value = value;
                this.apiKey.headerOrQueryName = headerOrQueryName;
                this.apiKey.isQuery = isQuery;
            };
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            /**
            * Set Basic Auth
            * @method
            * @name {{&className}}#setBasicAuth
            * @param {string} username
            * @param {string} password
            */
            {{&className}}.prototype.setBasicAuth = function (username, password) {
                this.basic.username = value;
                this.basic.password = password;
            };
        {{/isSecureBasic}}
        /**
        * Set Auth headers
        * @method
        * @name {{&className}}#setAuthHeaders
        * @param {object} headerParams - headers object
        */
        {{&className}}.prototype.setAuthHeaders = function (headerParams) {
            let headers = headerParams ? headerParams : {};
        {{#isSecureToken}}
            if (!this.token.isQuery) {
                if (this.token.headerOrQueryName) {
                    headers[this.token.headerOrQueryName] = this.token.value;
                } else if (this.token.value) {
                    headers['Authorization'] = 'Bearer ' + this.token.value;
                }
            }
        {{/isSecureToken}}
        {{#isSecureApiKey}}
            if (!this.apiKey.isQuery && this.apiKey.headerOrQueryName) {
                headers[this.apiKey.headerOrQueryName] = this.apiKey.value;
            }
        {{/isSecureApiKey}}
        {{#isSecureBasic}}
            if (this.basic.username && this.basic.password) {
                headers['Authorization'] = 'Basic ' + btoa(this.basic.username + ':' + this.basic.password);
            }
        {{/isSecureBasic}}
            return headers;
        };
    {{/isSecure}}

    {{#methods}}
        {{> method}}
    {{/methods}}

    return {{&className}};
})();

export default {{&className}};
